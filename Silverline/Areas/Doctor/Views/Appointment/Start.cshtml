@model Silverline.Core.ViewModels.AppointmentDetailViewModel

<form method="post">
<div class="container-fluid">
	<div class="row">
		<h4>Patient Name: @Model.PatientName</h4>
		<h4>Patient Age: @Model.PatientAge</h4>
		<h4>Date Time: @DateTime.Now</h4>

		<div class="card">
			<div class="card-body">
				<div class="row">
					<label asp-for="Appointment.AppointmentTitle" class="mb-3"></label>
					<input asp-for="Appointment.AppointmentId" class="form-control" hidden/>
					<input asp-for="Appointment.AppointmentTitle" class="form-control mb-4" />
					<h4>Comments</h4>
					<textarea asp-for="Appointment.AppointmentDescription" class="form-control"></textarea>
				</div>
			</div>
		</div>

		<div class="col-md-12">
			<table id="medicationTable" class="table table-striped table-sm">
				<thead>
					<tr>
						<th>Medicine</th>
						<th>Dose</th>
						<th>Time Period</th>
						<th>Time Format</th>
						<th>Remarks</th>
						<th></th>
					</tr>
				</thead>
				<tbody>
						@for (int i = 0; i < Model.Appointment.MedicalTreatments.Count; i++)
						{
							<tr>
								<td>
									@Html.DropDownListFor(x => x.Appointment.MedicalTreatments[i].MedicineId, Model.MedicineList, "Select a medicine", new { @class = "form-control", @id = "medicine_" + @i })
								</td>
								<td>
									@Html.EditorFor(x => x.Appointment.MedicalTreatments[i].Dose, new { @class = "form-group", @id = "dose_" + @i } )
								</td>
								<td>
									@Html.EditorFor(x => x.Appointment.MedicalTreatments[i].TimePeriod, new { @class = "form-group", @id = "period_" + @i } )
								</td>
								<td>
									@Html.EditorFor(x => x.Appointment.MedicalTreatments[i].TimeFormat, new { @class = "form-group", @id = "format_" + @i } )
								</td>
								<td>
									@Html.EditorFor(x => x.Appointment.MedicalTreatments[i].DoctorRemarks, new { @class = "form-group", @id = "medicineRemarks_" + @i } )
								</td>
								<td>
									<button id="btnadd-@i" type="button" class="btn btn-primary visible" onclick="addMedicine(this)" style="position: absolute;">
										Add
									</button>
									<button id="btnremove-@i" type="button" class="btn btn-primary invisible" onclick="deleteMedicine(this)" style="position: absolute;">
										Delete
									</button>
								</td>
							</tr>
						}
				</tbody>
			</table>
		</div>

		<input type="hidden" id="hiddenLastMedicineIndex" value="0" />


		<div class="col-md-12">
			<table id="testTable" class="table table-striped table-sm">
				<thead>
					<tr>
						<th>Test Type</th>
						<th>Remarks</th>
						<th></th>
					</tr>
				</thead>
				<tbody>
						@for (int i = 0; i < Model.Appointment.LaboratoryDiagnosis.Count; i++)
						{
							<tr>
								<td>
									@Html.DropDownListFor(x => x.Appointment.LaboratoryDiagnosis[i].TestId, Model.LaboratoryTestList, "Select a test", new { @class = "form-control", @id = "test_" + @i })
								</td>
								<td>
									@Html.EditorFor(x => x.Appointment.LaboratoryDiagnosis[i].DoctorRemarks, new { @class = "form-group", @id = "testRemarks_" + @i } )
								</td>
								<td>
									<button id="btnaddTest-@i" type="button" class="btn btn-primary visible" onclick="addTest(this)" style="position: absolute;">
										Add
									</button>
									<button id="btnremoveTest-@i" type="button" class="btn btn-primary invisible" onclick="deleteTest(this)" style="position: absolute;">
										Delete
									</button>
								</td>
							</tr>
						}
				</tbody>
			</table>
		</div>

		<input type="hidden" id="hiddenLastTestIndex" value="0" />

		<div class="col-12 btn-group">
			<div class="col-6 form-group text-left p-2">
				<input type="submit" value="Finalize Appointment" class="btn btn-primary" />
			</div>
		</div>

	</div>
</div>
</form>


@section Scripts{
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
	}

	<script type="text/javascript">

		function addMedicine(btn) {
			var table = document.getElementById('medicationTable');
			var rows = table.getElementsByTagName('tr');

			var rowOuterHTML = rows[rows.length - 1].outerHTML;

			var lastrowIndex = document.getElementById('hiddenLastMedicineIndex').value;
			var nextrowIndex = eval(lastrowIndex) + 1;
			document.getElementById('hiddenLastMedicineIndex').value = nextrowIndex;

			rowOuterHTML = rowOuterHTML.replaceAll('_' + lastrowIndex, '_' + nextrowIndex);
			rowOuterHTML = rowOuterHTML.replaceAll('[' + lastrowIndex + ']', '[' + nextrowIndex + ']');
			rowOuterHTML = rowOuterHTML.replaceAll('-' + lastrowIndex, '-' + nextrowIndex);

			var newRow = table.insertRow();
			newRow.innerHTML = rowOuterHTML;

			var btnAddID = btn.id;
			var btnDeleteID = btnAddID.replaceAll('btnadd', 'btnremove');

			var delbtn = document.getElementById(btnDeleteID);
			delbtn.classList.add("visible");
			delbtn.classList.remove("invisible");

			var addbtn = document.getElementById(btnAddID);
			addbtn.classList.remove("visible");
			addbtn.classList.add("invisible");
		}

		function deleteMedicine(btn) {
			$(btn).closest('tr').remove();
		}

		function addTest(btn) {
			var table = document.getElementById('testTable');
			var rows = table.getElementsByTagName('tr');

			var rowOuterHTML = rows[rows.length - 1].outerHTML;

			var lastrowIndex = document.getElementById('hiddenLastTestIndex').value;
			var nextrowIndex = eval(lastrowIndex) + 1;
			document.getElementById('hiddenLastTestIndex').value = nextrowIndex;

			rowOuterHTML = rowOuterHTML.replaceAll('_' + lastrowIndex, '_' + nextrowIndex);
			rowOuterHTML = rowOuterHTML.replaceAll('[' + lastrowIndex + ']', '[' + nextrowIndex + ']');
			rowOuterHTML = rowOuterHTML.replaceAll('-' + lastrowIndex, '-' + nextrowIndex);

			var newRow = table.insertRow();
			newRow.innerHTML = rowOuterHTML;

			var btnAddID = btn.id;
			console.log(btnAddID);
			var btnDeleteID = btnAddID.replaceAll('btnadd', 'btnremove');

			var delbtn = document.getElementById(btnDeleteID);
			delbtn.classList.add("visible");
			delbtn.classList.remove("invisible");

			var addbtn = document.getElementById(btnAddID);
			addbtn.classList.remove("visible");
			addbtn.classList.add("invisible");
		}

		function deleteTest(btn) {
			$(btn).closest('tr').remove();
		}

		tinymce.init({
			forced_root_block : false,
			selector: 'textarea',
			plugins: 'anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount checklist mediaembed casechange export formatpainter pageembed linkchecker a11ychecker tinymcespellchecker permanentpen powerpaste advtable advcode editimage tinycomments tableofcontents footnotes mergetags autocorrect typography inlinecss',
			toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | addcomment showcomments | spellcheckdialog a11ycheck typography | align lineheight | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
			tinycomments_mode: 'embedded',
			tinycomments_author: 'Author name',
			mergetags_list: [
			{ value: 'First.Name', title: 'First Name' },
			{ value: 'Email', title: 'Email' },
			]
		});


	</script>
}

